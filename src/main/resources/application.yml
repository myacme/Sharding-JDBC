server:
  port: 8080

spring:
  application:
    name: sharding-jdbc-demo
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  
  # Sharding-JDBC配置
  shardingsphere:
    datasource:
      names: ds0,ds1
      ds0:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/sharding_db_0?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=GMT%2B8
        username: root
        password: mysql@1qaz
        hikari:
          maximum-pool-size: 20
          minimum-idle: 5
          connection-timeout: 30000
          idle-timeout: 600000
          max-lifetime: 1800000
      ds1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/sharding_db_1?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=GMT%2B8
        username: root
        password: mysql@1qaz
        hikari:
          maximum-pool-size: 20
          minimum-idle: 5
          connection-timeout: 30000
          idle-timeout: 600000
          max-lifetime: 1800000
    
    # 分片规则配置
    rules:
      sharding:
        # 默认数据源
        default-data-source-name: ds0

        # 分片表配置
        tables:
          # 用户表分片规则
          t_user:
            actual-data-nodes: ds$->{0..1}.t_user
            database-strategy:
              standard:
                sharding-column: user_id
                sharding-algorithm-name: user-db-algorithm
            table-strategy:
              none:

          # 订单表分片规则
          t_order:
            actual-data-nodes: ds$->{0..1}.t_order_$->{0..1}
            database-strategy:
              standard:
                sharding-column: user_id
                sharding-algorithm-name: order-db-algorithm
            table-strategy:
              standard:
                sharding-column: order_id
                sharding-algorithm-name: order-table-algorithm

        # 分片算法配置
        sharding-algorithms:
          # 用户表数据库分片算法（按user_id取模）
          user-db-algorithm:
            type: INLINE
            props:
              algorithm-expression: ds$->{user_id % 2}

          # 订单表数据库分片算法（按user_id取模）
          order-db-algorithm:
            type: INLINE
            props:
              algorithm-expression: ds$->{user_id % 2}

          # 订单表分片算法（按order_id取模）
          order-table-algorithm:
            type: INLINE
            props:
              algorithm-expression: t_order_$->{order_id % 2}
    
    # 属性配置
    props:
      sql-show: true
      sql-simple: true

# MyBatis配置
mybatis:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.example.shardingjdbc.entity
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

# SpringDoc OpenAPI 3 配置（Knife4j）
springdoc:
  api-docs:
    path: /v3/api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui.html

#knife4j:
#  enable: true
#  setting:
#    language: zh-CN
#    enable-footer: false
#    enable-filter: true
#    enable-group: true
#    enable-debug: true
#    enable-openapi: true
#  basic:
#    enable: false


# 日志配置
logging:
  level:
    com.example.shardingjdbc: debug
    org.apache.shardingsphere: debug
  config: classpath:logback.xml
